(load-file "~/.emacs.d/plugins/cedet/common/cedet.el")
(global-ede-mode 1)                      ; Enable the Project management system
(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion 
(global-srecode-minor-mode 1)            ; Enable template insertion menu
(semantic-load-enable-minimum-features)
(semantic-load-enable-guady-code-helpers)
(semantic-load-enable-excessive-code-helpers)
(global-semantic-stickyfunc-mode -1) ;; "semantic-stickyfunc-mode" is preventing tabbar.el to function
(semantic-load-enable-semantic-debugging-helpers)


(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete")

(require 'auto-complete-clang-async)
(require 'auto-complete)
(require 'auto-complete-config)
;;(add-to-list 'ac-dictionary-directories "~/.emacs.d/plugins/auto-complete/dict")
;;(ac-config-default)

;; 使用Ctrl+enter按键触发自动补全
;; (define-key ac-mode-map  [(control return)] 'auto-complete)
;; (define-key ac-mode-map  [(tab)] 'auto-complete)
(setq ac-quick-help-delay 0.5)

(defun ac-cc-mode-setup ()
  (setq ac-clang-flags
      (mapcar (lambda (item)(concat "-I" item))
              (split-string
               "
 /usr/include/c++/4.7
 /usr/include/c++/4.7/x86_64-suse-linux
 /usr/include/c++/4.7/backward
 /usr/lib64/gcc/x86_64-suse-linux/4.7/include
 /usr/local/include
 /usr/lib64/gcc/x86_64-suse-linux/4.7/include-fixed
 /usr/lib64/gcc/x86_64-suse-linux/4.7/../../../../x86_64-suse-linux/include
 /usr/include
 /home/goodchong/workspace/WrightEagle/src
	"
	))
  )
  (setq ac-clang-complete-executable "~/.emacs.d/plugins/auto-complete/clang-complete")
  (setq ac-sources '(ac-source-clang-async))
  (ac-clang-launch-completion-process)
)

(defun my-ac-config ()
  (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
  (add-hook 'c++-mode-common-hook 'ac-cc-mode-setup)
;;  (add-hook 'auto-complete-mode-hook 'ac-common-setup)
  (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
  (global-auto-complete-mode t))

(my-ac-config)

(require 'cl) ; If you don't have it already

(defun* get-closest-pathname (&optional (max-level 3) (file "Makefile"))
  (let ((root (expand-file-name "/"))
        (level 0))
    (expand-file-name file
                      (loop
                       for d = default-directory then (expand-file-name ".." d)
                       do (setq level (+ level 1))
                       if (file-exists-p (expand-file-name file d))
                       return d
                       if (> level max-level)
                       return nil
                       if (equal d root)
                       return nil))))


(defun my-compile-command () 
	(unless (file-exists-p "Makefile")
              (set (make-local-variable 'compile-command)
                   (let ((file (file-name-nondirectory buffer-file-name))
                         (mkfile (get-closest-pathname)))
                     (if mkfile
                         (progn (format "cd %s; make -f %s"
                            (file-name-directory mkfile) mkfile))
                       (format "%s -c -o %s.o %s %s %s"
                               (or (getenv "CC") "gcc")
                               (file-name-sans-extension file)
                               (or (getenv "CPPFLAGS") "-DDEBUG=9")
                               (or (getenv "CFLAGS") "-ansi -pedantic -Wall -g")
                               file)))))  
)
(add-hook 'c++-mode-hook 'my-compile-command)
(add-hook 'c-mode-hook 'my-compile-command)

